class Solution {
    public String[] findRestaurant(String[] list1, String[] list2) {
        Map<Integer,List<String>> mapOfList1=new HashMap<Integer,List<String>>();
        List<String> newList2=Arrays.asList(list2);
         int sumOfIndex=0;
        for(int i=0;i<list1.length;i++){
           if(newList2.contains(list1[i])){
                sumOfIndex=(newList2.indexOf(list1[i])+i);
                 if(!mapOfList1.containsKey(sumOfIndex)){
                     mapOfList1.put(sumOfIndex,new ArrayList<String>());
                 }
            mapOfList1.get(sumOfIndex).add(list1[i]);
           }
         }
        int min=Collections.min(mapOfList1.keySet());
        String[] str=new String[mapOfList1.get(min).size()];
        return mapOfList1.get(min).toArray(str);
        
    }
}


/** Minimum Index Sum of Two Lists

Solution
Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.

 

Example 1:

Input: list1 = ["Shogun","Tapioca Express","Burger King","KFC"], list2 = ["Piatti","The Grill at Torrey Pines","Hungry Hunter Steakhouse","Shogun"]
Output: ["Shogun"]
Explanation: The only restaurant they both like is "Shogun".
Example 2:

Input: list1 = ["Shogun","Tapioca Express","Burger King","KFC"], list2 = ["KFC","Shogun","Burger King"]
Output: ["Shogun"]
Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).
  **/
